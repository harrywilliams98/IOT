# Panic Button

## Overview
This project has the objective of sending the location of the unphone to a third party (external user who doesn't have access to the unPhone) when a button has been pressed. Through comparing the signal strength of nearby access points, the latitude and longitude coordinates of the ESP32 can be found using the Google Maps API. The location should be sent accurately to the third party and unobstructed by the unPhone being in or around buildings.

## Design
Before we can get started on the implementation there are several design choices we must consider.

### unPhone GUI
First of all we must come to a decision on how the GUI of the unPhone will look. The GUI must be clear and straightforward to use as adults and children need to have the ability to trigger the panic button regardless of their technical expertise. This led us to the agreement that having a large red button on the middle of the screen which can be pressed would be intuitive to use. 


Although the use of a button is beneficial due to its simplicity, a potential risk occurred to us that the button could accidentally be pressed while in the pocket. A solution to this problem would be to make a slider rather than a button meaning the user must slide a bar across the screen to trigger the panic button. However, this could reduce simplicity of the system and in a large majority of cases the user will have their unPhone switched off while in their bag/pocket in order to save battery, meaning it will not be triggered anyway.


A useful addition would be to give the unPhone user some options to press stating the type of emergency after the button has been triggered, as this could allow them to provide the third party information so they can prepare the necessary response to the situation. We have come to the decision that 3 large buttons matching the emergency services would be adequate; once one is pressed the data will be sent and we have considered refreshing the location in the instance that it has changed.


In the case of accidentally triggering the panic button due to a false alarm or the crisis being resolved, we have decided to allow the user of the unPhone to reset the alarm. Following that button press will be two options that the user can select depending on the situation: ‘False Alarm’ or ‘Panic Over’. Afterwards the panic button can be triggered again. 


Another consideration is setting up a user interface for registering the unPhone to WiFi networks (should we choose to implement a WiFi compatibility). Doing so would ensure that the user could still have a connection to Adafruit and IFTTT while off the University campus.

### Third Party / Responder
We have considered using Adafruit with a simple layout which shows the coordinates in text and an interactive map to clearly specify the location of the unPhone. In the middle of the screen will be a large circle that shows the status of the unPhone. While the panic button has not been pressed, the circle will be coloured green and when the panic button has been pressed the circle will flash red, drawing attention to the third party while they are on the Adafruit web page. At the centre of the top of the page will be a text box that’s filled in with the follow-up details of the situation if the unPhone user has the opportunity to select one of the three options. 


Furthermore, the Adafruit dashboard could have other features such as a number pad which could be used to type in numbers to send the alert to; an interactive map that could display the coordinates and the surrounding area; a stopwatch that checks how much time has passed since the incident began; a slider on the severity of the incident and how the situation got resolved when the alert stopped. However, due to memory constraints on the ESP32 board we believe that these extra features are a surplus and aren’t necessary for the final implementation unless there is a significant amount of memory remaining.


In addition to notifying the third party on the Adafruit dashboard, we have considered other methods of transmitting alerts because the third party will not always have the web page opened. Ideas that have crossed our mind include text messages; emails and tweets from Twitter as most everyday people check and receive these regularly. These actions would use IFTTT to automatically trigger after the press of the panic button.

### Connection Types: LoRaWAN and WiFi
Our first choice is making use of LoRaWAN to allow the unPhone to send out the signals to IFTTT and Adafruit. The main advantage to choosing LoRaWAN is that the unPhone user is not restricted by their WiFi connection. Otherwise, if they are not connected or are out of range of their registered WiFi networks the system will cease to function, meaning in theory LoRaWAN would be beneficial as they could connect from anywhere. Having a connection from any location is fundamental to this system if the demographic was everyone because the user will never be able to foresee when they will need to use this system, so it is never guaranteed that they will be in a location with WiFi access. 


Using WiFi would be beneficial when in range of a router because the connection would be reliable and secure. For this project it is feasible to use WiFi because the demographic is staff and students, meaning a majority of the time they will have a strong connection to UOS-Other which would be sufficient for this system. WiFi will have to be configured 

## Final Design
Having taken all of our design choices into consideration we have been able to make our final design. Here is our annotated designs of the GUI on the unPhone:
![unPhone GUI Design](guiDesign.jpg) 

Below is the Flowchart and pseudocode for our system:
![Flowchart of unPhone system](PanicBDesign-2.jpg) 
    
    WHILE NOT connected to LoRaWAN And WiFi
        Attempt to connect to LoRaWAN
        Attempt to connect to WiFi
    WHILE device is connected to LoRaWAN And WiFi
        DISPLAY panic_button_main_screen 
        WHILE User has NOT pressed panicButton
            Check for panicButton press
        SET panic TO TRUE
        WHILE panic IS TRUE
            longitudeCoords =  GET longitude co-ordinates from Google Maps API
            latitudeCoords = GET latitude co-ordinates from Google Maps API
            SEND alert(longitudeCoords, latitudeCoords) TO ADAFRUIT_DASHBOARD
            SEND alert(longitudeCoords, latitudeCoords) TO designated PHONE_NUMBER through IFTTT
            SEND alert(longitudeCoords, latitudeCoords) TO designated EMAIL_ADDRESS through IFTTT
            DISPLAY type_of_emergency_screen
            WHILE user has NOT pressed any of the 3 'emergency buttons'
                Check for buttonPress
            SET typeOfEmergency TO buttonPress
            SEND typeOfEmergency TO ADAFRUIT_DASHBOARD
            SEND typeOfEmergency TO designated PHONE_NUMBER through IFTTT
            SEND typeOfEmergency TO designated EMAIL_ADDRESS through IFTTT 
            DISPLAY details_of_emergency_screen
            WHILE panic IS TRUE
                Check for response from Adafruit
                IF response received
                    DISPLAY responseNumber
                Check for buttonPress which would stop the alert
                IF buttonPress IS 'Resolved' OR 'False Alarm' 
                    SET howPanicEnded TO buttonPress
                    SEND howPanicEnded TO ADAFRUIT_DASHBOARD
                    SEND howPanicEnded TO designated PHONE_NUMBER through IFTTT
                    SEND howPanicEnded TO designated EMAIL_ADDRESS through IFTTT 
                    SET panic TO FALSE
        
        

    

Below is the design of the Adafruit dashboard:
![Flowchart of Adafruit](AdafruitGUIDesign.jpg) 

Here is the design of the Adafruit Processes:
![Flowchart of Adafruit](AdafruitDesign.jpg) 

In a summary, here are the key design choices we made having taken everything into consideration:

* Use both LoRaWAN and WiFi as this will likely always create a strong connection to the internet whether indoors or outdoors
* Intuitive and clear interface with large, self-explanatory buttons allowing computer illiterate users to easily understand the system
* Send type of emergency to the third party giving them relevant information about the situation
* Allow the unPhone user to stop the panic alert with 2 options to explain why the emergency ended
* Send data from the unPhone to the Adafruit Dashboard which allows the third party to clearly understand the situation of the unPhone user. Simple UI consisting of location coordinates; a circle coloured green or red depending on the state of the emergency; the time the signal was sent out and an emergency contact keypad where the number is sent back to the unPhone user advising them to call it. 
* Send data from the unPhone to a designated mobile phone number and email address. This can be done using IFTTT


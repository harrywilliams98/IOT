# Panic Button

## Overview
This project has the objective of sending the location of the unphone to a third party (external user who doesn't have access to the unPhone) when a button has been pressed. Through comparing the signal strength of nearby access points, the latitude and longitude coordinates of the ESP32 can be found using the Google Maps API. The location should be sent accurately to the third party and unobstructed by the unPhone being in or around buildings.

## Design Considerations
Before we can get started on the implementation there are several design choices we must consider.

### unPhone GUI
First of all we must come to a decision on how the GUI of the unPhone will look. The GUI must be clear and straightforward to use as adults and children need to have the ability to trigger the panic button regardless of their technical expertise. This led us to the agreement that having a large red button on the middle of the screen which can be pressed would be intuitive to use. 


Although the use of a button is beneficial due to its simplicity, a potential risk occurred to us that the button could accidentally be pressed while in the pocket. A solution to this problem would be to make a slider rather than a button meaning the user must slide a bar across the screen to trigger the panic button. However, this could reduce simplicity of the system and in a large majority of cases the user will have their unPhone switched off while in their bag/pocket in order to save battery, meaning it will not be triggered anyway.


A useful addition would be to give the unPhone user some options to press stating the type of emergency after the button has been triggered, as this could allow them to provide the third party information so they can prepare the necessary response to the situation. We have come to the decision that 3 large buttons matching the emergency services would be adequate; once one is pressed the data will be sent and we have considered refreshing the location in the instance that it has changed.


In the case of accidentally triggering the panic button due to a false alarm or the crisis being resolved, we have decided to allow the user of the unPhone to reset the alarm. Following that button press will be two options that the user can select depending on the situation: ‘False Alarm’ or ‘Panic Over’. Afterwards the panic button can be triggered again. 


Another consideration is setting up a user interface for registering the unPhone to WiFi networks (should we choose to implement a WiFi compatibility). Doing so would ensure that the user could still have a connection to Adafruit and IFTTT while off the University campus.

### Third Party / Responder
We have considered using Adafruit with a simple layout which shows the coordinates in text and an interactive map to clearly specify the location of the unPhone. In the middle of the screen will be a large circle that shows the status of the unPhone. While the panic button has not been pressed, the circle will be coloured green and when the panic button has been pressed the circle will flash red, drawing attention to the third party while they are on the Adafruit web page. At the centre of the top of the page will be a text box that’s filled in with the follow-up details of the situation if the unPhone user has the opportunity to select one of the three options. 


Furthermore, the Adafruit dashboard could have other features such as a number pad which could be used to type in numbers to send the alert to; an interactive map that could display the coordinates and the surrounding area; a stopwatch that checks how much time has passed since the incident began; a slider on the severity of the incident and how the situation got resolved when the alert stopped. However, due to memory constraints on the ESP32 board we believe that these extra features are a surplus and aren’t necessary for the final implementation unless there is a significant amount of memory remaining.


In addition to notifying the third party on the Adafruit dashboard, we have considered other methods of transmitting alerts because the third party will not always have the web page opened. Ideas that have crossed our mind include text messages; emails and tweets from Twitter as most everyday people check and receive these regularly. These actions would use IFTTT to automatically trigger after the press of the panic button.


### Geolocation Connection Types: LoRaWAN and WiFi
Our first choice is making use of LoRaWAN to allow the unPhone to send out the signals to IFTTT and Adafruit. The main advantage to choosing LoRaWAN is that the unPhone user is not restricted by the poor WiFi connection range. Otherwise, if they are not connected or are out of range of their registered WiFi networks the system will cease to function, meaning in theory LoRaWAN would be beneficial as they could connect from (theoretically) practical ranges of up to 5km, contrasting to WiFi's relatively microscopic range of 10-20m. Having a connection from more locations is fundamental to this system if the demographic was everyone because the user will never be able to foresee when they will need to use this system, so it is never guaranteed that they will be in a location with WiFi access. 


Using WiFi would be beneficial when in range of a router because the connection would be reliable and secure. For this project it is feasible to use WiFi because the demographic is staff and students, meaning a majority of the time they will have a strong connection to UOS-Other which would be sufficient for this system. WiFi will have to be configured in the code to work unless we provide a GUI in the unPhone. This would be unnecessary though because the device is dedicated to the University campus which uses just one WiFi connection (as stated before) across all locations.

### Security
In comparison to other projects, the security considerations are reasonably limited. Using a secure WiFi network on campus such as UOS-Other (that requires one to verify their MAC address) will significantly reduce the risk of our data being compromised. In addition, sendinig data to Adafruit via https means the personal location data will be encrypted during transmission which is beneficial to the security of the system.

### Battery
Using a connection to WiFi will consume considerably more battery in comparison to LoRaWAN alone. In order to keep the battery consumption minimal we would recommend turning off the device when it doesn't need to be used as this would increase the battery longevity drastically. This makes sense for a system such as a Panic Button device which does not need to be on until the minute a situation occurs. Turning off the device would also prevent pocket-pressing the panic button. LoRaWAN is significantly less power hungry than WiFi meaning the battery life will last much longer.  

## Final Design
Having taken all of our design choices into consideration we have been able to make our final design. Here is our annotated designs of the GUI on the unPhone:
![unPhone GUI Design](guiDesign.jpg) 

Below is the Flowchart and pseudocode for our system:
![Flowchart of unPhone system](PanicBDesign-2.jpg) 
    
    WHILE NOT connected to LoRaWAN And WiFi
        Attempt to connect to LoRaWAN
        Attempt to connect to WiFi
    WHILE device is connected to LoRaWAN And WiFi
        DISPLAY panic_button_main_screen 
        WHILE User has NOT pressed panicButton
            Check for panicButton press
        SET panic TO TRUE
        WHILE panic IS TRUE
            longitudeCoords =  GET longitude co-ordinates from Google Maps API
            latitudeCoords = GET latitude co-ordinates from Google Maps API
            SEND alert(longitudeCoords, latitudeCoords) TO ADAFRUIT_DASHBOARD
            SEND alert(longitudeCoords, latitudeCoords) TO designated PHONE_NUMBER through IFTTT
            SEND alert(longitudeCoords, latitudeCoords) TO designated EMAIL_ADDRESS through IFTTT
            DISPLAY type_of_emergency_screen
            WHILE user has NOT pressed any of the 3 'emergency buttons'
                Check for buttonPress
            SET typeOfEmergency TO buttonPress
            SEND typeOfEmergency TO ADAFRUIT_DASHBOARD
            SEND typeOfEmergency TO designated PHONE_NUMBER through IFTTT
            SEND typeOfEmergency TO designated EMAIL_ADDRESS through IFTTT 
            DISPLAY details_of_emergency_screen
            WHILE panic IS TRUE
                Check for response from Adafruit
                IF response received
                    DISPLAY responseNumber
                Check for buttonPress which would stop the alert
                IF buttonPress IS 'Resolved' OR 'False Alarm' 
                    SET howPanicEnded TO buttonPress
                    SEND howPanicEnded TO ADAFRUIT_DASHBOARD
                    SEND howPanicEnded TO designated PHONE_NUMBER through IFTTT
                    SEND howPanicEnded TO designated EMAIL_ADDRESS through IFTTT 
                    SET panic TO FALSE
        
        

    

Below is the design of the Adafruit dashboard:
![Flowchart of Adafruit](AdafruitGUIDesign.jpg) 

Here is the design of the Adafruit Processes:
![Flowchart of Adafruit](AdafruitDesign.jpg) 

In a summary, here are the key design choices we made having taken everything into consideration:

* Use both LoRaWAN and WiFi as this will likely always create a strong connection to the internet whether indoors or outdoors
* Intuitive and clear interface with large, self-explanatory buttons allowing computer illiterate users to easily understand the system
* Send type of emergency to the third party giving them relevant information about the situation
* Allow the unPhone user to stop the panic alert with 2 options to explain why the emergency ended
* Send data from the unPhone to the Adafruit Dashboard which allows the third party to clearly understand the situation of the unPhone user. Simple UI consisting of location coordinates; a circle coloured green or red depending on the state of the emergency; the time the signal was sent out and an emergency contact keypad where the number is sent back to the unPhone user advising them to call it. 
* Send data from the unPhone to a designated mobile phone number and email address. This can be done using IFTTT.
* Send data from the unPhone in long time intervals in order to preserve battery life.


## Implementation and Testing
While we comfortably achieved our main goals of the design, we did make some changes while developing the software. The most significant change we had to make was to solely use WiFi as the unPhone's connection to the internet instead of accessing LoRaWAN. After several attempts to make it work, we could not achieve a successful connection when the device was more than about one metre away from the transmitters or if the device was obstructed by physical barriers such as walls. There would be no purpose to keep this as the chances of maintaining a connection to LoRaWAN when the device is on is minimal so we came to the decision of removing it and simply connecting to UOS-Other WiFi.


We also attempted to implement an interactive map in the Adafruit user interface but had no luck as the ESP32 ran out of memory. Upon trying to add the number system into the Adafruit UI we also ran out of memory, although these weren't significantly detrimental to our system as they were surplus features that weren't fundamental. Students and staff on campus typically already know the telephone numbers for campus and local emergency services as they can be seen on the doors to accomodation and on signs around University buildings. This means that the phone number interface is not absolutely necessary to the system. The final change from the design we made was the removal of Twitter's implementation. We decided that this wasn't absolutely necessary because not everyone has twitter whereas students and staff are provided an email address meaning everyone will have one, in addition to a mobile phone that can receive text messages.

A key addition we decided to implement throughout the development stage was a loading screen that appears after the type of emergency is sent to the third party devices (Adafruit dashboard; phone and email). Sending the location data - even over a fast secure WiFi network such as UOS-Other - takes a significant amount of time to transmit, causing us to change the design slightly. 

Instead of sending data when the panic button is hit, data is sent only when the type of emergency is pressed so there is one delay while the data is sent instead of two. This is beneficial to the system because this allows the user to transmit the type of emergency information quicker. After pushing the panic button, pressing one of the 3 options is quick and simple because of the straight-forward GUI meaning the alert is transmitted almost as quickly as just pressing the panic button.

One observation we made as we implemented a WiFi connection to the device was the increase in voltage from 4.1 V to 4.4 V. This significant increase in power consumption will be heavily detrimental to the longevity of the battery life on a single charge; however turning the device off as we have suggested in the design considerations will still ensure that a single charge will last long enough for the user to rely on the device lasting several weeks. In addition, changing the signal to only send once after the type of emergency has been transmitted ensures the device will last longer on one charge as a single signal will get sent per emergency. The user can always send more than one location update by cancelling that last emergency and transmitting another.

The key functionality aspects of our working system include:
* Connecting to a WiFi network to send the panic alerts.
* A simple user interface matching our design. The only difference is the removal of the 'Stop emergency' button. This decision was made to reduce the clutter on the screen maintaining the simplistic look of the GUI. Once the panic button is pressed, the type of situation is pressed and then the resolution (resolved / false alarm) options appear. This does not change the functionality of the code as one could still notify the third parties of the false alarm in such a case; however they now must first state the type of emergency. This is not detrimental to the system because the user will press the type of emergency immediately after pressing the panic button and before realising the situation is a false alarm.
* When the panic button is pressed followed by the type of emergency, the location data; context and time is sent to the Adafruit dashboard; phone and email through IFTTT.
* A clean looking Adafruit dashboard with a large circle showing the current status of the unPhone (green for safe and red for an alert). When the panic button is pressed, the dashboard is updated in real time to change the colour ('status') of the circle and on the left-hand side of the screen the coordinates and time of alert are printed. When the situation comes to an end, the cause of resolution is printed beneath the information previously sent.
* Attached phone numbers and emails automatically receive information about location and status whenever the panic button is sent meaning all third party users remain up to date.

Here is a series of screenshots of our unPhone GUI:

<img src="guiHome.jpg" width="200"> <img src="guiTypeOfEmergency.jpg" width="200"> <img src="gettingLocation.jpg" width="200"> <img src="guiSituation.jpg" width="200">

As seen in the screenshots above, all of the pages load correctly when a button is pressed. The user interface is clear and responsive to our touches. Testing the actual signals will come with the third party user interface screenshots. We noticed that the device took around 5 seconds to boot into a smooth, usable state from being switched completely off. Although every second counts in an emergency, allowing an alert signal to be sent approximately 7 seconds after switching the device on (including the time taken to give inputs) is still impressive and certainly better than unlocking (or switching on) a mobile phone. 

Another observation made while using the device was that the RAM usage of the ESP32 while in use rose to approximately 70%. This means that while there would be room in theory for more features, using more RAM would reduce the responsiveness of the GUI which is vital to a Panic Button system. 

Here is our Adafruit Dashboard:
<img src="adaFinalReal.png" width="800">

As seen in the image above, the data and history is clearly shown on the left-hand side with the panic button in the middle showing the current status of the unPhone. One observation we made while testing was that the panic button in the Adafruit dashboard toggles to red before the location information appears. This must be because an alert toggle is significaantly less data to send in comparison to longitude and latitude co ordinates   

Here is an example of our IFTTT transmissions working (email and text message):





